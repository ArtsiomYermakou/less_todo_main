{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348fbbc8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': \"298395db-2088-448b-824f-15482d6c3999\"\r\n        //API-KEY: \"298395db-2088-448b-824f-15482d6c3999\"\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId: number }>>(\"auth/login\", data);\r\n        return promise;\r\n    },\r\n    me(){\r\n        const promise = instance.get<ResponseType<AuthMeType>>(\"auth/me\");\r\n        return promise;\r\n    },\r\n    logout(){\r\n        const promise = instance.delete<ResponseType>(\"/auth/login\")\r\n        return promise\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                debugger\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {SetIsLoggedInType, setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//TC\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n            }\r\n            dispatch(dispatch(setAppInitializedAC(true)))\r\n        })\r\n}\r\n//AC\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (isInitialized : boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppInitializedType = ReturnType<typeof setAppInitializedAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetIsLoggedInType\r\n    | setAppInitializedType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 6) {\r\n                errors.password = \"Password > 6 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <h3>Email and password for the test</h3>\r\n                        <p>Email: artem_ermakov_1999@mail.ru</p>\r\n                        <p>Password: Uzatit1999</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Route, Switch, Redirect} from 'react-router-dom'\r\nimport {Login} from \"../features/login/Login\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={\"/login\"} render={() => <Login/>}/>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                    {/*<Route exact path={\"/404\"} render={() => <h1>404</h1>}/>*/}\r\n                    {/*<Redirect from={\"*\"} to={\"/404\"}/>*/}\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}