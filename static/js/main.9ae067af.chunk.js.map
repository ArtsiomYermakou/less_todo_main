{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","tasks","map","t","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId","filteredTasks","tasksObj","setTasksObj","task","v1","newTasks","changeStatus","find","taskId","todolist","todolists","tl","setTodolists","todolistId1","todolistId2","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9ae067af.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={\"outlined\"}\r\n                       label={\"Type value\"}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n            <IconButton onClick={addTask} color={\"primary\"}>\r\n                <ControlPoint />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                 onChange={onChangeTitleHandler}\r\n                 onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let newIsDoneValue = e.currentTarget.checked;\r\n                            props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id);\r\n                        }\r\n\r\n                        return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox\r\n                                onChange={onChangeStatusHandler}\r\n                                checked={t.isDone}/>\r\n\r\n                            <EditableSpan title={t.title}\r\n                                          onChange={onChangeTitleHandler}/>\r\n                            <IconButton onClick={onClickHandler}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let tasks = tasksObj[todolistId];\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        tasksObj[todolistId] = filteredTasks;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let tasks = tasksObj[todolistId];\r\n        let newTasks = [task, ...tasks];\r\n        tasksObj[todolistId] = newTasks;\r\n\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTasks = tasksObj[todolistId];\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todolistId: string) {\r\n        let todolistTasks = tasksObj[todolistId];\r\n        let task = todolistTasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasksObj({...tasksObj});\r\n        }\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, id: string) {\r\n        let todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"},\r\n    ]);\r\n\r\n\r\n    let removeTodolist = (id: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== id));\r\n        delete tasksObj[id];\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n\r\n    let [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n        ]\r\n    });\r\n\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const todolist = todolists.find(tl => tl.id === id)\r\n        if (todolist) {\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            filter: \"all\",\r\n            title: title\r\n        };\r\n        setTodolists([todolist, ...todolists])\r\n        setTasksObj({...tasksObj, [todolist.id]: []})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TODOLIST\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{ padding: \"20px\" }}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n\r\n                            let tasksForTodolist = tasksObj[tl.id];\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={ { padding: \"10px\" } }>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}